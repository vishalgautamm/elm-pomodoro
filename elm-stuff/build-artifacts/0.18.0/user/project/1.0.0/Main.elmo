var _user$project$Main$revealTime = function (time) {
	var seconds = _elm_lang$core$Basics$toString(
		(A2(
			_elm_lang$core$Basics_ops['%'],
			_elm_lang$core$Basics$round(time),
			_elm_lang$core$Basics$round(_elm_lang$core$Time$minute)) / _elm_lang$core$Basics$round(_elm_lang$core$Time$second)) | 0);
	var minutes = _elm_lang$core$Basics$toString(
		_elm_lang$core$Basics$floor(time / _elm_lang$core$Time$minute));
	return A2(
		_elm_lang$core$Basics_ops['++'],
		minutes,
		A2(_elm_lang$core$Basics_ops['++'], ':', seconds));
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Tick':
				var _p1 = model.paused;
				if (_p1 === true) {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								time: A2(_elm_lang$core$Basics$max, 0, model.time - _elm_lang$core$Time$second)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'Work':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{time: 25 * _elm_lang$core$Time$minute, paused: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FCChat':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{time: 10 * _elm_lang$core$Time$minute, paused: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Coffee':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{time: 5 * _elm_lang$core$Time$minute, paused: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Play':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{paused: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Pause':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{paused: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{time: 0, paused: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: {time: 25 * _elm_lang$core$Time$minute, paused: false},
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$styles = function (_p2) {
	return _elm_lang$html$Html_Attributes$style(
		_rtfeldman$elm_css$Css$asPairs(_p2));
};
var _user$project$Main$Model = F2(
	function (a, b) {
		return {time: a, paused: b};
	});
var _user$project$Main$Reset = {ctor: 'Reset'};
var _user$project$Main$Pause = {ctor: 'Pause'};
var _user$project$Main$Play = {ctor: 'Play'};
var _user$project$Main$buttonControls = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _user$project$Main$styles(
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$backgroundColor(
							A3(_rtfeldman$elm_css$Css$rgb, 0, 116, 217)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Play),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Play'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _user$project$Main$styles(
						{
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$backgroundColor(
								A3(_rtfeldman$elm_css$Css$rgb, 255, 220, 0)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Pause),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Pause'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _user$project$Main$styles(
							{
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$backgroundColor(
									A3(_rtfeldman$elm_css$Css$rgb, 255, 92, 0)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Reset),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Reset'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}
	});
var _user$project$Main$Coffee = {ctor: 'Coffee'};
var _user$project$Main$FCChat = {ctor: 'FCChat'};
var _user$project$Main$Work = {ctor: 'Work'};
var _user$project$Main$buttonTasks = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Work),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Time for some work'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$FCChat),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('FCChat break'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Coffee),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Coffee Brk'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}
	});
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h2,
								{
									ctor: '::',
									_0: _user$project$Main$styles(
										{
											ctor: '::',
											_0: _rtfeldman$elm_css$Css$boxSizing(_rtfeldman$elm_css$Css$borderBox),
											_1: {
												ctor: '::',
												_0: _rtfeldman$elm_css$Css$textAlign(_rtfeldman$elm_css$Css$center),
												_1: {
													ctor: '::',
													_0: _rtfeldman$elm_css$Css$fontSize(
														_rtfeldman$elm_css$Css$px(100)),
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_user$project$Main$revealTime(model.time)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Time to work'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: _user$project$Main$buttonTasks,
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: _user$project$Main$buttonControls,
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _user$project$Main$Tick);
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
